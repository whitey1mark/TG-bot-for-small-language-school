from aiogram import types, F
from aiogram.types import ReplyKeyboardRemove
import sqlite3

from database import get_db
from states import RegistrationStates
from utils import send_message_with_cleanup
from keyboards import get_user_keyboard

def register_registration_handlers(dp, bot, user_last_messages):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–º–∏–ª–∏–∏
    @dp.message(RegistrationStates.waiting_for_surname)
    async def process_surname(message: types.Message, state):
        await state.update_data(surname=message.text.strip())
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:", parse_mode="Markdown")
        await state.set_state(RegistrationStates.waiting_for_name)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏
    @dp.message(RegistrationStates.waiting_for_name)
    async def process_name(message: types.Message, state):
        await state.update_data(name=message.text.strip())
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–æ—Ç—á–µ—Å—Ç–≤–æ*:",
                             parse_mode="Markdown")
        await state.set_state(RegistrationStates.waiting_for_patronymic)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Å—Ç–≤–∞
    @dp.message(RegistrationStates.waiting_for_patronymic)
    async def process_patronymic(message: types.Message, state):
        await state.update_data(patronymic=message.text.strip())

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        gender_keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π")],
                      [types.KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")],
                      [types.KeyboardButton(text="ü§∑ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å")]],
            resize_keyboard=True)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à *–ø–æ–ª*:",
                             parse_mode="Markdown",
                             reply_markup=gender_keyboard)
        await state.set_state(RegistrationStates.waiting_for_gender)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞
    @dp.message(RegistrationStates.waiting_for_gender)
    async def process_gender(message: types.Message, state):
        gender_map = {
            "üë® –ú—É–∂—Å–∫–æ–π": "male",
            "üë© –ñ–µ–Ω—Å–∫–∏–π": "female",
            "ü§∑ –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å": "not_specified"
        }

        if message.text not in gender_map:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
            return

        await state.update_data(gender=gender_map[message.text])
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *email*:",
                             parse_mode="Markdown",
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegistrationStates.waiting_for_email)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ email
    @dp.message(RegistrationStates.waiting_for_email)
    async def process_email(message: types.Message, state):
        email = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:")
            return

        await state.update_data(email=email)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = types.ReplyKeyboardMarkup(keyboard=[[
            types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                 request_contact=True)
        ]],
                                             resize_keyboard=True)

        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:",
                             parse_mode="Markdown",
                             reply_markup=keyboard)
        await state.set_state(RegistrationStates.waiting_for_phone)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    @dp.message(RegistrationStates.waiting_for_phone, F.contact)
    async def process_phone(message: types.Message, state):
        user_data = await state.get_data()
        phone_number = message.contact.phone_number

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –§–ò–û
        full_name = f"{user_data['surname']} {user_data['name']} {user_data['patronymic']}"

        conn = get_db()
        cursor = conn.cursor()

        try:
            cursor.execute(
                "INSERT INTO users (user_id, username, surname, name, patronymic, full_name, phone_number) VALUES (?, ?, ?, ?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username,
                 user_data['surname'], user_data['name'], user_data['patronymic'],
                 full_name, phone_number))
            conn.commit()

            await message.answer(
                f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"üë§ *–§–ò–û:* {full_name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone_number}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.",
                parse_mode="Markdown",
                reply_markup=get_user_keyboard())

        except sqlite3.IntegrityError:
            await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                                 reply_markup=get_user_keyboard())

        finally:
            conn.close()
            await state.clear()