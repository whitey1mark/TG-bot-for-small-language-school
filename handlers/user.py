from aiogram import types, F
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

from database import get_db
from states import EditProfileStates
from utils import send_message_with_cleanup
from keyboards import get_user_keyboard, get_cancel_keyboard

def register_user_handlers(dp, bot, user_last_messages):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ü–µ–Ω—ã
    @dp.message(Command("prices"))
    async def cmd_prices(message: types.Message):
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name, price FROM categories ORDER BY price")
        categories = cursor.fetchall()
        conn.close()

        if not categories:
            await message.answer(
                "üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–Ω—è—Ç–∏–π.\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏
        price_list = "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:*\n\n"

        for category in categories:
            price_list += f"‚Ä¢ {category['name']}: {category['price']} —Ä—É–±.\n"

        price_list += "\nüìû –î–ª—è –∑–∞–ø–∏—Å–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."

        await message.answer(price_list, parse_mode="Markdown")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π"
    @dp.message(F.text == "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π")
    async def user_prices_button(message: types.Message):
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name, price FROM categories ORDER BY price")
        categories = cursor.fetchall()
        conn.close()

        if not categories:
            await message.answer(
                "üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–Ω—è—Ç–∏–π.\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            return

        price_list = "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:*\n\n"

        for category in categories:
            price_list += f"‚Ä¢ {category['name']}: {category['price']} —Ä—É–±.\n"

        price_list += "\nüìû –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"

        await message.answer(price_list, parse_mode="Markdown")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    @dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    async def user_profile(message: types.Message):
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?",
                       (message.from_user.id, ))
        user = cursor.fetchone()
        conn.close()

        if user:
            await message.answer(
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
                f"‚Ä¢ –ò–º—è: {user['full_name']}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
                f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at']}\n\n",
                parse_mode="Markdown")
        else:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    async def edit_profile_start(message: types.Message, state):
        builder = InlineKeyboardBuilder()
        builder.button(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_surname")
        builder.button(text="–ò–º—è", callback_data="edit_name")
        builder.button(text="–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="edit_patronymic")
        builder.button(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")
        builder.adjust(2)

        await send_message_with_cleanup(bot, message.chat.id,
                                        "üìù *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*",
                                        parse_mode="Markdown",
                                        reply_markup=builder.as_markup(),
                                        user_last_messages=user_last_messages)
        await state.set_state(EditProfileStates.waiting_edit_choice)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @dp.callback_query(EditProfileStates.waiting_edit_choice,
                       F.data == "edit_cancel")
    async def process_edit_cancel(callback: types.CallbackQuery,
                                  state):
        await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                      reply_markup=get_user_keyboard())
        await state.clear()
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @dp.callback_query(EditProfileStates.waiting_edit_choice,
                       F.data.startswith("edit_"))
    async def process_edit_choice(callback: types.CallbackQuery,
                                  state):
        field = callback.data.replace("edit_", "")
        field_messages = {
            "surname": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:",
            "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
            "patronymic": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ:",
            "phone": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        }

        await state.update_data(edit_field=field)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await bot.delete_message(callback.message.chat.id,
                                     callback.message.message_id)
        except:
            pass

        message = await send_message_with_cleanup(
            bot,
            callback.message.chat.id,
            field_messages[field],
            reply_markup=get_cancel_keyboard(),
            user_last_messages=user_last_messages)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if field == "surname":
            await state.set_state(EditProfileStates.waiting_edit_surname)
        elif field == "name":
            await state.set_state(EditProfileStates.waiting_edit_name)
        elif field == "patronymic":
            await state.set_state(EditProfileStates.waiting_edit_patronymic)
        elif field == "phone":
            await state.set_state(EditProfileStates.waiting_edit_phone)

        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    @dp.message(EditProfileStates.waiting_edit_surname, F.text
                != "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    async def process_edit_surname(message: types.Message, state):
        await update_user_field(message, state, "surname", message.text)

    @dp.message(EditProfileStates.waiting_edit_name, F.text
                != "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    async def process_edit_name(message: types.Message, state):
        await update_user_field(message, state, "name", message.text)

    @dp.message(EditProfileStates.waiting_edit_patronymic, F.text
                != "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    async def process_edit_patronymic(message: types.Message, state):
        await update_user_field(message, state, "patronymic", message.text)

    @dp.message(EditProfileStates.waiting_edit_phone, F.text
                != "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    async def process_edit_phone(message: types.Message, state):
        await update_user_field(message, state, "phone_number", message.text)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @dp.message(
        F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        StateFilter(EditProfileStates.waiting_edit_surname,
                    EditProfileStates.waiting_edit_name,
                    EditProfileStates.waiting_edit_patronymic,
                    EditProfileStates.waiting_edit_phone))
    async def cancel_editing(message: types.Message, state):
        await send_message_with_cleanup(bot, message.chat.id,
                                        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                        reply_markup=get_user_keyboard(),
                                        user_last_messages=user_last_messages)
        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
    @dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è")
    async def pay_for_lessons(message: types.Message):
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name, price FROM categories ORDER BY price")
        categories = cursor.fetchall()
        conn.close()

        if not categories:
            await message.answer(
                "üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        builder = InlineKeyboardBuilder()

        for category in categories:
            builder.button(text=f"{category['name']} - {category['price']} —Ä—É–±.",
                           callback_data=f"pay_{category['name']}")

        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

        await message.answer(
            "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.",
            parse_mode="Markdown",
            reply_markup=builder.as_markup())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @dp.callback_query(F.data.startswith("pay_"))
    async def process_payment_selection(callback: types.CallbackQuery):
        category_name = callback.data.replace("pay_", "")

        await callback.message.answer(
            f"üí≥ *–û–ø–ª–∞—Ç–∞: {category_name}*\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://www.tbank.ru/cf/1Tmq99zZo95\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

        await callback.answer()

async def update_user_field(message: types.Message, state, field: str, new_value: str, bot, user_last_messages):
    user_data = await state.get_data()

    conn = get_db()
    cursor = conn.cursor()

    try:
        cursor.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?",
                       (new_value.strip(), message.from_user.id))
        conn.commit()

        if field in ["surname", "name", "patronymic"]:
            cursor.execute(
                "SELECT surname, name, patronymic FROM users WHERE user_id = ?",
                (message.from_user.id, ))
            user = cursor.fetchone()
            if user:
                full_name = f"{user['surname']} {user['name']} {user['patronymic']}"
                cursor.execute(
                    "UPDATE users SET full_name = ? WHERE user_id = ?",
                    (full_name, message.from_user.id))
                conn.commit()

        await send_message_with_cleanup(bot, message.chat.id,
                                        "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                                        reply_markup=get_user_keyboard(),
                                        user_last_messages=user_last_messages)

    except Exception as e:
        await send_message_with_cleanup(bot, message.chat.id,
                                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}",
                                        reply_markup=get_user_keyboard(),
                                        user_last_messages=user_last_messages)

    finally:
        conn.close()
        await state.clear()