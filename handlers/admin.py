from aiogram import types, F
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
import sqlite3
import asyncio

from database import get_db
from states import AdminStates
from utils import send_message_with_cleanup
from keyboards import get_admin_keyboard, get_categories_keyboard

def register_admin_handlers(dp, bot, user_last_messages, is_admin_func):
    # –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞
    @dp.message(Command("admin"))
    async def cmd_admin(message: types.Message):
        if not is_admin_func(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                             reply_markup=get_admin_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
    @dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º")
    async def admin_broadcast(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            return

        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_broadcast_message)

    @dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def admin_delete_user(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            return

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_delete_user)

    @dp.message(AdminStates.waiting_delete_user)
    async def process_delete_user(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        user_input = message.text.strip()
        conn = get_db()
        cursor = conn.cursor()

        try:
            user = None

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            cursor.execute(
                "SELECT user_id, full_name, phone_number FROM users WHERE phone_number LIKE ?",
                (f"%{user_input}%", ))
            user = cursor.fetchone()

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É, –ø—Ä–æ–±—É–µ–º –ø–æ ID
            if not user and user_input.isdigit():
                cursor.execute(
                    "SELECT user_id, full_name, phone_number FROM users WHERE user_id = ?",
                    (int(user_input), ))
                user = cursor.fetchone()

            if user:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(delete_user_id=user['user_id'],
                                        delete_user_name=user['full_name'],
                                        delete_user_phone=user['phone_number'])

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirm_keyboard = types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")],
                              [types.KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]],
                    resize_keyboard=True)

                await message.answer(
                    f"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?*\n\n"
                    f"üë§ *–ò–º—è:* {user['full_name']}\n"
                    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user['phone_number']}\n"
                    f"üÜî *ID:* {user['user_id']}\n\n"
                    f"*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*",
                    parse_mode="Markdown",
                    reply_markup=confirm_keyboard)

                # –ü–ï–†–ï–•–û–î–ò–ú –í –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
                await state.set_state(AdminStates.waiting_delete_confirm)

            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                     reply_markup=get_admin_keyboard())
                await state.clear()

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
                                 reply_markup=get_admin_keyboard())
            await state.clear()

        finally:
            conn.close()

    @dp.message(AdminStates.waiting_delete_confirm,
                F.text.in_(["‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]))
    async def process_delete_confirm(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        user_data = await state.get_data()

        if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å" and 'delete_user_id' in user_data:
            user_id = user_data['delete_user_id']
            user_name = user_data['delete_user_name']

            conn = get_db()
            cursor = conn.cursor()

            try:
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                cursor.execute("DELETE FROM payments WHERE user_id = ?",
                               (user_id, ))
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id, ))
                conn.commit()

                await message.answer(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                    parse_mode="Markdown",
                    reply_markup=get_admin_keyboard())

            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}",
                                     reply_markup=get_admin_keyboard())

            finally:
                conn.close()

        else:
            await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                 reply_markup=get_admin_keyboard())

        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏"
    @dp.message(F.text == "üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏")
    async def admin_manage_categories(message: types.Message):
        if not is_admin_func(message.from_user.id):
            return

        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM categories")
        count = cursor.fetchone()[0]
        conn.close()

        if count == 0:
            await message.answer(
                "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–Ω—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                reply_markup=get_categories_keyboard())
        else:
            await message.answer("üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞–Ω—è—Ç–∏–π:",
                                 reply_markup=get_categories_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    @dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    async def admin_create_category(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            return

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_category_name)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @dp.message(AdminStates.waiting_category_name)
    async def process_category_name(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        category_name = message.text.strip()

        conn = get_db()
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT * FROM categories WHERE name = ?",
                           (category_name, ))
            if cursor.fetchone():
                await message.answer(
                    "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
                return

            await state.update_data(category_name=category_name)

            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            await state.set_state(AdminStates.waiting_category_price)

        finally:
            conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @dp.message(AdminStates.waiting_category_price)
    async def process_category_price(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        try:
            price = int(message.text.strip())
            if price <= 0:
                raise ValueError

            user_data = await state.get_data()
            category_name = user_data['category_name']

            conn = get_db()
            cursor = conn.cursor()

            try:
                cursor.execute(
                    "INSERT INTO categories (name, price) VALUES (?, ?)",
                    (category_name, price))
                conn.commit()

                await message.answer(
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category_name}* —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.",
                    parse_mode="Markdown",
                    reply_markup=get_categories_keyboard())

            except sqlite3.IntegrityError:
                await message.answer(
                    "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    reply_markup=get_categories_keyboard())

            finally:
                conn.close()

            await state.clear()

        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    @dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    async def admin_delete_category(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            return

        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM categories")
        categories = cursor.fetchall()
        conn.close()

        if not categories:
            await message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                 reply_markup=get_categories_keyboard())
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        builder = InlineKeyboardBuilder()

        for category in categories:
            builder.button(text=f"{category['name']} - {category['price']} —Ä—É–±.",
                           callback_data=f"delete_cat_{category['id']}")

        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")
        builder.adjust(1)

        await message.answer("üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                             parse_mode="Markdown",
                             reply_markup=builder.as_markup())

        await state.set_state(AdminStates.waiting_delete_category)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    @dp.callback_query(AdminStates.waiting_delete_category,
                       F.data.startswith("delete_cat_"))
    async def process_delete_category_selection(callback: types.CallbackQuery,
                                                state):
        if not is_admin_func(callback.from_user.id):
            await state.clear()
            return

        category_id = int(callback.data.replace("delete_cat_", ""))

        conn = get_db()
        cursor = conn.cursor()

        try:
            cursor.execute("SELECT * FROM categories WHERE id = ?",
                           (category_id, ))
            category = cursor.fetchone()

            if category:
                cursor.execute("DELETE FROM categories WHERE id = ?",
                               (category_id, ))
                conn.commit()

                await callback.message.answer(
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è *{category['name']}* —É–¥–∞–ª–µ–Ω–∞!",
                    parse_mode="Markdown",
                    reply_markup=get_categories_keyboard())

            else:
                await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                                              reply_markup=get_categories_keyboard())

        finally:
            conn.close()

        await state.clear()
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
    @dp.callback_query(AdminStates.waiting_delete_category,
                       F.data == "delete_cancel")
    async def process_delete_cancel(callback: types.CallbackQuery, state):
        await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                      reply_markup=get_categories_keyboard())
        await state.clear()
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    @dp.message(F.text == "üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    async def admin_message_user(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            return

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_user_phone)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ID/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.message(AdminStates.waiting_user_phone)
    async def process_user_identifier(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        user_input = message.text.strip()
        conn = get_db()
        cursor = conn.cursor()

        try:
            user = None

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            cursor.execute(
                "SELECT user_id, full_name FROM users WHERE phone_number LIKE ?",
                (f"%{user_input}%", ))
            user = cursor.fetchone()

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É, –ø—Ä–æ–±—É–µ–º –ø–æ ID
            if not user and user_input.isdigit():
                cursor.execute(
                    "SELECT user_id, full_name FROM users WHERE user_id = ?",
                    (int(user_input), ))
                user = cursor.fetchone()

            if user:
                await state.update_data(target_user_id=user['user_id'],
                                        target_user_name=user['full_name'])

                await message.answer(
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['full_name']}\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
                await state.set_state(AdminStates.waiting_user_message)

            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                     reply_markup=get_admin_keyboard())
                await state.clear()

        finally:
            conn.close()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    @dp.message(AdminStates.waiting_user_message)
    async def process_user_message(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        user_data = await state.get_data()
        target_user_id = user_data['target_user_id']
        target_user_name = user_data['target_user_name']
        admin_message = message.text

        try:
            await bot.send_message(
                target_user_id,
                f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:*\n\n{admin_message}",
                parse_mode="Markdown")

            await message.answer(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_name}!",
                reply_markup=get_admin_keyboard())

        except Exception as e:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}",
                reply_markup=get_admin_keyboard())

        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    @dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def admin_statistics(message: types.Message):
        if not is_admin_func(message.from_user.id):
            return

        conn = get_db()
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM payments")
        total_payments = cursor.fetchone()[0]

        cursor.execute("SELECT SUM(amount) FROM payments")
        total_revenue = cursor.fetchone()[0] or 0

        cursor.execute("SELECT COUNT(*) FROM categories")
        total_categories = cursor.fetchone()[0]

        conn.close()

        stats_message = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí≥ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±.\n"
            f"üéì –ö–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–Ω—è—Ç–∏–π: {total_categories}"
        )

        await message.answer(stats_message, parse_mode="Markdown")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"
    @dp.message(F.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
    async def admin_exit(message: types.Message):
        if not is_admin_func(message.from_user.id):
            return

        await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                             reply_markup=types.ReplyKeyboardRemove())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.message(AdminStates.waiting_broadcast_message)
    async def process_broadcast(message: types.Message, state):
        if not is_admin_func(message.from_user.id):
            await state.clear()
            return

        broadcast_text = message.text

        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        conn.close()

        success_count = 0
        fail_count = 0

        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user in users:
            try:
                await bot.send_message(user['user_id'],
                                       f"üì¢ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ:*\n\n{broadcast_text}",
                                       parse_mode="Markdown")
                success_count += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            except Exception:
                fail_count += 1

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
            reply_markup=get_admin_keyboard())

        await state.clear()